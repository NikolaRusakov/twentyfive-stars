# source: http://localhost:3000/
# timestamp: Thu May 28 2020 21:30:17 GMT-0700 (Mountain Standard Time)

schema {
  query: QueryRoot
}

directive @defer on FIELD

directive @stream on FIELD

type AltMode implements CharacterMode {
  id: ID!
  title: String!
  subtitle: String!
  stars: Int!
  type: ModeType!
  faction: Faction!
  traits: [CharacterTrait!]!
  health: Int!
  attack: Int!
  defense: Int!
}

type BattleCard implements Node & Card {
  id: ID!
  tcgId: String!
  rarity: CardRarity!
  number: String!
  category: CardCategory!
  wave: Wave!
  title: String!
  stars: Int
  icons: [BattleIcon!]!
  type: BattleType!
  faction: Faction
  attackModifier: Int
  defenseModifier: Int
}

enum BattleIcon {
  ORANGE
  BLUE
  WHITE
  GREEN
  BLACK
}

enum BattleType {
  ACTION
  SECRET_ACTION
  UPGRADE_WEAPON
  UPGRADE_ARMOR
  UPGRADE_UTILITY
}

type BodyMode implements CharacterMode {
  id: ID!
  title: String!
  subtitle: String!
  stars: Int!
  type: ModeType!
  faction: Faction!
  traits: [CharacterTrait!]!
  health: Int!
  attack: Int!
  defense: Int!
}

type BotMode implements CharacterMode {
  id: ID!
  title: String!
  subtitle: String!
  stars: Int!
  type: ModeType!
  faction: Faction!
  traits: [CharacterTrait!]!
  health: Int!
  attack: Int!
  defense: Int!
}

interface Card {
  id: ID!
  tcgId: String!
  rarity: CardRarity!
  number: String!
  category: CardCategory!
  wave: Wave!
}

enum CardCategory {
  CHARACTER
  BATTLE
  STRATAGEM
}

enum CardRarity {
  COMMON
  UNCOMMON
  RARE
  SUPER_RARE
  THEME
  PROMO
}

union Cards = BattleCard | CharacterCard | StratagemCard

type CardsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CardsEdge]
}

"""An edge in a connection."""
type CardsEdge {
  """The item at the end of the edge"""
  node: Cards!

  """A cursor for use in pagination"""
  cursor: String!
}

type CharacterCard implements Card & Node {
  id: ID!
  tcgId: String!
  rarity: CardRarity!
  number: String!
  category: CardCategory!
  wave: Wave!
  modes: [CharacterMode!]!
}

interface CharacterMode {
  id: ID!
  title: String!
  stars: Int!
  type: ModeType!
  faction: Faction!
}

enum CharacterTrait {
  MELEE
  RANGED
  SPECIALIST
  MOTORCYCLE
  SPACESHIP
  TRUCK
  LEADER
  CAR
  INSECTICON
  TANK
  DINOBOT
  PLANE
}

type CombinerBodyMode implements CharacterMode {
  id: ID!
  title: String!
  subtitle: String!
  stars: Int!
  type: ModeType!
  faction: Faction!
  traits: [CharacterTrait!]!
  health: Int!
  attack: Int!
  defense: Int!
}

type CombinerMode implements CharacterMode {
  id: ID!
  title: String!
  subtitle: String!
  stars: Int!
  type: ModeType!
  faction: Faction!
  traits: [CharacterTrait!]!
  health: Int!
  attack: Int!
  defense: Int!
}

enum Faction {
  AUTOBOT
  DECEPTICON
  MERCENARY
}

type HeadMode implements CharacterMode {
  id: ID!
  title: String!
  stars: Int!
  type: ModeType!
  faction: Faction!
}

enum ModeType {
  ALT
  ALT_1
  ALT_2
  BOT
  COMBINER
  UPGRADE_WEAPON
  UPGRADE_ARMOR
  UPGRADE_UTILITY
  BODY
  HEAD
  COMBINER_BODY
}

scalar NaiveDate

interface Node {
  id: ID!
}

"""Information about pagination in a connection"""
type PageInfo {
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type QueryRoot {
  node(id: ID!): Node!
  allCards(after: String, before: String, first: Int, last: Int): CardsConnection!
}

type StratagemCard implements Node & Card {
  id: ID!
  tcgId: String!
  rarity: CardRarity!
  number: String!
  category: CardCategory!
  wave: Wave!
  title: String!
  requirement: String!
  stars: Int!
  faction: Faction!
}

type UpgradeMode implements CharacterMode {
  id: ID!
  title: String!
  stars: Int!
  type: ModeType!
  faction: Faction!
  traits: [CharacterTrait!]!
  attackModifier: Int
  defenseModifier: Int
}

type Wave implements Node {
  id: ID!
  tcgId: String!
  name: String!
  released: NaiveDate!
}
