# source: http://localhost:3000/
# timestamp: Sat Apr 25 2020 14:42:48 GMT-0700 (Mountain Standard Time)

schema {
  query: QueryRoot
}

type AltMode implements CharacterMode {
  attack: Int!
  defense: Int!
  faction: Faction!
  health: Int!
  id: ID!
  stars: Int!
  subtitle: String!
  title: String!
  traits: [CharacterTrait!]!
  type: ModeType!
}

type BattleCard implements Node & Card {
  attackModifier: Int
  category: CardCategory!
  defenseModifier: Int
  faction: Faction
  icons: [BattleIcon!]!
  id: ID!
  number: String!
  rarity: CardRarity!
  stars: Int
  tcgId: String!
  title: String!
  type: BattleType!
  wave: Wave!
}

enum BattleIcon {
  BLACK
  ORANGE
  BLUE
  WHITE
  GREEN
}

enum BattleType {
  UPGRADE_ARMOR
  SECRET_ACTION
  ACTION
  UPGRADE_WEAPON
  UPGRADE_UTILITY
}

type BodyMode implements CharacterMode {
  attack: Int!
  defense: Int!
  faction: Faction!
  health: Int!
  id: ID!
  stars: Int!
  subtitle: String!
  title: String!
  traits: [CharacterTrait!]!
  type: ModeType!
}

type BotMode implements CharacterMode {
  attack: Int!
  defense: Int!
  faction: Faction!
  health: Int!
  id: ID!
  stars: Int!
  subtitle: String!
  title: String!
  traits: [CharacterTrait!]!
  type: ModeType!
}

interface Card {
  category: CardCategory!
  id: ID!
  number: String!
  rarity: CardRarity!
  tcgId: String!
  wave: Wave!
}

enum CardCategory {
  CHARACTER
  STRATAGEM
  BATTLE
}

type CardConnection {
  """
  A list of all of the objects returned in the connection. This is a convenience
  field provided for quickly exploring the API; rather than querying for "{
  edges { node } }" when no edge data is needed, this field can be be used
  instead. Note that when clients like Relay need to fetch the "cursor" field on
  the edge to enable efficient pagination, this shortcut cannot be used, and the
  full "{ edges { node } }" version should be used instead.
  """
  cards: [Card!]

  """A list of edges."""
  edges: [CardEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  A count of the total number of objects in this connection, ignoring
  pagination. This allows a client to fetch the first five objects by passing
  "5" as the argument to "first", then fetch the total count so it could display
  "5 of 83", for example.
  """
  totalCount: Int
}

"""An edge in a connection."""
type CardEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Card!
}

enum CardRarity {
  PROMO
  COMMON
  UNCOMMON
  SUPER_RARE
  RARE
  THEME
}

type CharacterCard implements Node & Card {
  category: CardCategory!
  id: ID!
  modes: [CharacterMode!]!
  number: String!
  rarity: CardRarity!
  tcgId: String!
  wave: Wave!
}

interface CharacterMode {
  faction: Faction!
  stars: Int!
  title: String!
  type: ModeType!
}

enum CharacterTrait {
  MOTORCYCLE
  INSECTICON
  CAR
  TANK
  SPECIALIST
  MELEE
  TRUCK
  SPACESHIP
  DINOBOT
  PLANE
  LEADER
  RANGED
}

type CombinerBodyMode implements CharacterMode {
  attack: Int!
  defense: Int!
  faction: Faction!
  health: Int!
  id: ID!
  stars: Int!
  subtitle: String!
  title: String!
  traits: [CharacterTrait!]!
  type: ModeType!
}

type CombinerMode implements CharacterMode {
  attack: Int!
  defense: Int!
  faction: Faction!
  health: Int!
  id: ID!
  stars: Int!
  subtitle: String!
  title: String!
  traits: [CharacterTrait!]!
  type: ModeType!
}

scalar Cursor

scalar Date

enum Faction {
  MERCENARY
  DECEPTICON
  AUTOBOT
}

type HeadMode implements CharacterMode {
  faction: Faction!
  id: ID!
  stars: Int!
  title: String!
  type: ModeType!
}

enum ModeType {
  BODY
  UPGRADE_ARMOR
  ALT
  ALT_2
  BOT
  COMBINER
  HEAD
  COMBINER_BODY
  UPGRADE_UTILITY
  ALT_1
  UPGRADE_WEAPON
}

interface Node {
  id: ID!
}

type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type QueryRoot {
  allCards(after: Cursor, before: Cursor, first: Int, last: Int): CardConnection!
}

type StratagemCard implements Card & Node {
  category: CardCategory!
  faction: Faction
  id: ID!
  number: String!
  rarity: CardRarity!
  requirement: String!
  stars: Int!
  tcgId: String!
  title: String!
  wave: Wave!
}

type UpgradeMode implements CharacterMode {
  attackModifier: Int
  defenseModifier: Int
  faction: Faction!
  id: ID!
  stars: Int!
  title: String!
  traits: [CharacterTrait!]!
  type: ModeType!
}

type Wave implements Node {
  id: ID!
  name: String!
  released: Date!
  tcgId: String!
}
